{"version":3,"sources":["components/about/index.js","actions/user_actions.js","actions/types.js","components/RegisterLogin/index.js","components/RegisterLogin/register.js","components/App.js","serviceWorker.js","reducers/index.js","reducers/user_reducer.js","index.js"],"names":["About","Component","loginUser","dataToSubmit","type","payload","axios","post","then","response","data","registerUser","RegisterLogin","state","email","password","errors","displayErrors","map","error","i","key","handleChange","event","setState","target","name","value","submitForm","preventDefault","isFormvalid","props","dispatch","loginSuccess","history","push","concat","className","onSubmit","id","this","onChange","e","htmlFor","data-error","data-success","length","onClick","to","connect","user","register","lastname","passwordConfirmation","isFormValid","isFormEmpty","message","isPasswordValid","success","catch","err","console","App","path","component","Login","Register","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","chats","createStoreWithMiddleware","applyMiddleware","promiseMiddleware","ReduxThunk","createStore","ReactDOM","render","store","Reducer","__REDUX_DEVTOOLS_EXTENSION__","fallback","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.017048c2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class About extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n             This is the about page        !!!!!!!!!@@@@@@@@        \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n","import axios from 'axios';\r\n\r\nimport{\r\nLOGIN_USER,\r\nREGISTER_USER\r\n}from './types';\r\n\r\nexport function loginUser(dataToSubmit){\r\n    const request=axios.post('/api/users/login',dataToSubmit)\r\n    .then(response=>response.data)\r\n    \r\n\r\n    return{\r\n        type:LOGIN_USER,\r\n        payload:request\r\n    }\r\n}\r\n\r\nexport function registerUser(dataToSubmit){\r\n    const request=axios.post('/api/users/register',dataToSubmit)\r\n    .then(response=>response.data)\r\n    \r\n\r\n    return{\r\n        type:REGISTER_USER,\r\n        payload:request\r\n    }\r\n}","export const LOGIN_USER = 'login_user';\r\nexport const REGISTER_USER = 'register_user';","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n//import { response } from 'express';\r\nimport { loginUser } from '../../actions/user_actions'\r\nimport { Link } from 'react-router-dom';\r\nclass RegisterLogin extends Component {\r\n\r\n    state = {\r\n        email: \"\",\r\n        password: \"\",\r\n        errors: []\r\n    };\r\n\r\n    displayErrors = errors =>\r\n        errors.map((error, i) => <p key={i}>{error}</p>)\r\n\r\n    handleChange = event => {\r\n        this.setState({ [event.target.name]: event.target.value })\r\n    }\r\n\r\n    submitForm = event => {\r\n        event.preventDefault();\r\n\r\n        let dataToSubmit = {\r\n            email: this.state.email,\r\n            password: this.state.password\r\n        };\r\n\r\n        if (this.isFormvalid(this.state)) {\r\n            this.setState({ errors: [] })\r\n            this.props.dispatch(loginUser(dataToSubmit))\r\n                .then(response => {\r\n                    if (response.payload.loginSuccess) {\r\n                        this.props.history.push('/')\r\n                    } else {\r\n                        this.setState({\r\n                            errors: this.state.errors.concat(\r\n                                \"Failed to log in, you can check your Email and Password\"\r\n                            )\r\n                        })\r\n                    }\r\n\r\n                }\r\n                )\r\n\r\n        }else{\r\n            this.setState({\r\n                errors:this.state.errors.concat('Form is not valid')\r\n            })\r\n        }\r\n    }\r\n\r\n    isFormvalid = ({ email, password }) => email && password;\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <h2>Log In</h2>\r\n                <div className=\"row\">\r\n                    <form className=\"col s12\" onSubmit={event => this.submitForm(event)}>\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field col s12\">\r\n                                <input name=\"email\" id=\"email\" value={this.state.email} onChange={e => this.handleChange(e)}\r\n                                    type=\"email\" className=\"validate\" />\r\n                                <label htmlFor=\"email\">Email</label>\r\n                                <span className=\"helper-text\" data-error=\"Type a right type email\" data-success=\"right\" />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field col s12\">\r\n                                <input name=\"password\" id=\"password\" value={this.state.password} onChange={e => this.handleChange(e)}\r\n                                    type=\"password\" className=\"validate\" />\r\n                                <label htmlFor=\"email\">Password</label>\r\n                                <span className=\"helper-text\" data-error=\"Wrong\" data-success=\"right\" />\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                        {this.state.errors.length > 0 && (\r\n                            <div>\r\n                                {this.displayErrors(this.state.errors)}\r\n\r\n                            </div>\r\n\r\n                        )}\r\n\r\n\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"col s12\">\r\n                                <button className=\"btn waves-effect red\" type=\"submit\" name=\"action\" onClick={this.submitForm}>\r\n                                    Login\r\n                                </button>&nbsp;&nbsp;&nbsp;\r\n                                <Link to=\"/register\">\r\n                                <button className=\"btn waves-effect red\" type=\"submit\" name=\"action\">\r\n                                    Sign up\r\n                                </button>\r\n                                </Link>\r\n                            </div> \r\n                            <div className=\"col s6\">\r\n                                \r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        user: state.user\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(RegisterLogin);","import React, { Component } from 'react';\r\nimport { registerUser } from '../../actions/user_actions';\r\nimport {connect} from 'react-redux';\r\nclass register extends Component {\r\n    state = {\r\n        lastname:\"\",\r\n        name:\"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        passwordConfirmation:\"\",\r\n        errors: []\r\n    };\r\n\r\n    displayErrors = errors =>\r\n    errors.map((error, i) => <p key={i}>{error}</p>)\r\n\r\n    isFormValid = () => {\r\n        let errors = [];\r\n        let error;\r\n\r\n        if(this.isFormEmpty(this.state)){\r\n          error = {message:\"Fill in all fields\"};\r\n          this.setState({errors:errors.concat(error)});\r\n        }else if(!this.isPasswordValid(this.state)){\r\n             error = {message:\"Password is invalid\"};\r\n             this.setState({errors:errors.concat(error)});\r\n        }else{\r\n            return true;\r\n        }\r\n    }\r\n\r\n    isPasswordValid = ({password, passwordConfirmation}) =>{\r\n        if(password.length <6 || passwordConfirmation.length <6 ){\r\n            return false;\r\n        }else if(password !== passwordConfirmation){\r\n            return false;\r\n        }else{\r\n            return true;\r\n        }\r\n    }\r\n\r\n\r\n    isFormEmpty = ({ lastname, name, email, password, passwordConfirmation}) =>{\r\n        return (\r\n            !name.length || !lastname.length || !email.length || !password.length || !passwordConfirmation.length\r\n        );\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({ [event.target.name]: event.target.value })\r\n    }\r\n\r\n    submitForm =event=> {\r\n        event.preventDefault();\r\n\r\n        let dataToSubmit = {\r\n            email :this.state.email,\r\n            name : this.state.name,\r\n            lastname: this.state.lastname,\r\n            password: this.state.password,\r\n            passwordConfirmation : this.state.passwordConfirmation\r\n        }\r\n\r\n         \r\n        if(this.isFormValid()){\r\n           this.setState({errors:[]})\r\n           //if you don't want to use Redux, just use axios here.\r\n           this.props.dispatch(registerUser(dataToSubmit))\r\n           .then(response => {\r\n               if(response.payload.success){\r\n                 this.props.history.push('/login')\r\n               }else{\r\n                this.setState({\r\n                    errors:this.state.errors.concat(\"your attempt to send data to DB was failed\")\r\n                })\r\n               }\r\n           })\r\n\r\n           .catch(err => {\r\n               this.setState({\r\n                   errors:this.state.errors.concat(err)\r\n               });\r\n           })\r\n        }else{\r\n            console.error(\"Form is not valid\");\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n            <h2>Sign up</h2>\r\n            <div className=\"row\">\r\n                <form className=\"col s12\" onSubmit={event => this.submitForm(event)}>\r\n                    <div className=\"row\">\r\n                        <div className=\"input-field col s12\">\r\n                            <input name=\"lastname\" id=\"lastname\" value={this.state.lastname} onChange={e => this.handleChange(e)}\r\n                                type=\"text\" className=\"validate\" />\r\n                            <label htmlFor=\"lastname\">lastname</label>\r\n                            <span className=\"helper-text\" data-error=\"Type a right type email\" data-success=\"right\" />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                        <div className=\"input-field col s12\">\r\n                            <input name=\"name\" id=\"name\" value={this.state.name} onChange={e => this.handleChange(e)}\r\n                                type=\"text\" className=\"validate\" />\r\n                            <label htmlFor=\"name\">name</label>\r\n                            <span className=\"helper-text\" data-error=\"Wrong\" data-success=\"right\" />\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                        <div className=\"input-field col s12\">\r\n                            <input name=\"email\" id=\"email\" value={this.state.email} onChange={e => this.handleChange(e)}\r\n                                type=\"text\" className=\"validate\" />\r\n                            <label htmlFor=\"email\">email</label>\r\n                            <span className=\"helper-text\" data-error=\"Wrong\" data-success=\"right\" />\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                        <div className=\"input-field col s12\">\r\n                            <input name=\"password\" id=\"password\" value={this.state.password} onChange={e => this.handleChange(e)}\r\n                                type=\"password\" className=\"validate\" />\r\n                            <label htmlFor=\"password\">password</label>\r\n                            <span className=\"helper-text\" data-error=\"Wrong\" data-success=\"right\" />\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                        <div className=\"input-field col s12\">\r\n                            <input name=\"passwordConfirmation\" id=\"passwordConfirmation\" value={this.state.passwordConfirmation} onChange={e => this.handleChange(e)}\r\n                                type=\"password\" className=\"validate\" />\r\n                            <label htmlFor=\"passwordConfirmation\">passwordConfirmation</label>\r\n                            <span className=\"helper-text\" data-error=\"Wrong\" data-success=\"right\" />\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n\r\n                    {this.state.errors.length > 0 && (\r\n                        <div>\r\n                            {this.displayErrors(this.state.errors)}\r\n\r\n                        </div>\r\n                    )}\r\n\r\n\r\n\r\n                    <div className=\"row\">\r\n                        <div className=\"col s12\">\r\n                            <button className=\"btn waves-effect red\" type=\"submit\" name=\"action\" onClick={this.submitForm}>\r\n                                Create an account\r\n                            </button>\r\n                        </div> \r\n                        <div className=\"col s6\">\r\n                            \r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                </form>\r\n            </div>\r\n\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect()(register);","import React from 'react';\nimport { Route,Switch } from 'react-router-dom';\nimport About from \"./about\";\nimport Login from \"./RegisterLogin\";\nimport Register from \"./RegisterLogin/register\";\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Switch>\n       <Route path=\"/about\" component={About}/>\n       <Route path=\"/login\" component={Login}/>\n       <Route path=\"/register\" component={Register}/>\n      </Switch>\n    </div>\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {combineReducers} from 'redux';\r\n\r\nimport user from './user_reducer';\r\nimport chats from './chat_reducer';\r\n\r\nconst rootReducer =combineReducers({\r\n    user,chats\r\n\r\n})\r\n\r\nexport default rootReducer;","import {\r\n    LOGIN_USER,\r\n    REGISTER_USER\r\n} from '../actions/types';\r\n\r\nexport default function (state = {}, action) {\r\n    switch (action.type) {\r\n        case LOGIN_USER:\r\n            return { ...state, loginSuccess: action.payload }\r\n\r\n        case REGISTER_USER:\r\n            return { ...state, loginSuccess: action.payload }\r\n        default:\r\n            return state;\r\n\r\n    }\r\n\r\n}","import React,{Suspense} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Route, Switch } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware} from 'redux';\nimport promiseMiddleware from 'redux-promise'; \nimport ReduxThunk from 'redux-thunk';\nimport \"materialize-css/dist/css/materialize.min.css\";\nimport Reducer from './reducers';\n\nimport './i18next';\n\nconst createStoreWithMiddleware= applyMiddleware(promiseMiddleware,ReduxThunk)(createStore);\n\nReactDOM.render(\n  \n   <Provider store={createStoreWithMiddleware(Reducer,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())}>\n\n   \n\n     <BrowserRouter>\n     <Suspense fallback={(<div>Loading~~~</div>)}>\n     <App />\n     </Suspense>\n     </BrowserRouter>\n     </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}